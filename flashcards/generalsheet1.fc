
FLASHCARD
REMEMBER

let l:lccV = nr2char(0x02551) let l:lccH = nr2char(0x02550)
let l:lccTLC = nr2char(0x02554) let l:lccBLC = nr2char(0x0255A)
let l:lccTRC = nr2char(0x02557) let l:lccBRC = nr2char(0x0255D)

gawk    
    asort(arr [, d [, how] ])
    asorti(arr [, d [, how] ])
    gsub(regex, sub, string)
    index(str, sub)
    length(str)
    match(str, regex)
    split(str, arr, regex)
    printf(format, expr-list)
    strtonum(str)
    sub(regex, sub, string)
    substr(str, start, l)
    tolower(str)
    toupper(str)

#!/usr/bin/bash
#!/bin/bash                                                                                          
Tmp="/tmp/file"
Tmp1="/tmp/$$_$$"
trap 'exit 0' INT HUP QUIT TERM ALRM USR1
trap 'rm -f "$Tmp" "$Tmp1"' EXIT
rm -f "$Tmp"  >/dev/null 2>&1
rm -f "$Tmp1"  >/dev/null 2>&1


    ARGC         --  Implies the number of arguments provided at the command line.
    ARGV         --  Array that stores the cmd-line args. Valid index ranges from 0 to ARGC-1.
    CONVFMT      --  The conversion format for numbers. Its default value is %.6g.
    ENVIRON      --  An associative array of environment variables.
    FILENAME     --  The current file name.
    FS           --  The (input) field separator and its default value is space.
                     You can also change this by using -F command line option.
    NF           --  The number of fields in the current record.
    NR           --  The number of the current record.
    FNR          --  Similar to NR, but relative to the current file.
    OFMT         --  The output format number and its default value is %.6g.
    OFS          --  The output field separator and its default value is space.
    ORS          --  The output record separator and its default value is newline.
    RLENGTH      --  The length of the string matched by match function.
                     AWK's match function searches for a given string in the input-string.
    RS           --  It represents (input) record separator and its default value is newline.
    RSTART       --  The first position in the string matched by match function.
    SUBSEP       --  The separator character for array subscripts
    $0           --  The entire input record.
    $n           --  The nth field in the current record where the fields are separated by FS.
    ARGIND       --  The index in ARGV of the current file being processed.
    BINMODE      --  Specifies binary mode for all file I/O on non-POSIX systems.
    ERRNO        --  A string indicates an error when a redirection fails
    FIELDWIDTHS  --  A space separated list of field widths variable is set,
                     GAWK parses the input into fields of fixed width, instead of usingi
                     the value of the FS variable as the field separator.
    IGNORECASE   --  When this variable is set, GAWK becomes case-insensitive.
    LINT         --  Provides dynamic control of the lint option from the GAWK program.
    PROCINFO     --  This is an associative array containing information about the process,
                     such as real and effective UID numbers, process ID number, and so on.
    TEXTDOMAIN   --  The text domain of the AWK program. Used to find the localized translations
                     for the program's strings.



Ctrl-]           - move to definition of item undercurstor per ctags

git fetch origin - the list of branches and commit history is downloaded
                   from GitHub and synchronised into the clone on your machine.
                   Doing a fetch wont affect your local branches.
                   You can fetch as much as you like.
gv               - last visual selection

vim -u NONE      - start vim with no plugins

Git Branching 

                   $ git checkout -b <new branch name>
                   This is shorthand for:                                                                                                           
                   $ git branch <new branch name>
                   $ git checkout <new branch name>

                   Make edits and commit with
                   $ git commit -a -m 'comment'

                   To merge back to main
                   $ git checkout <main branch>
                   $ git merge <new branch name>

                   List Branches
                   $ git branch                                                                                                                       

FLASHCARD
tr -cd '\11\12\15\40-\176' < file-with-binary-chars > clean-file
let l:moe1 = nr2char(0xe2) 

gawk

FS      Input Field Separator, a space by default
OFS     Output Field Separator, a space by default
NF      The Number of Fields in the current input record
NR      The total Number of input Records seen so far
RS      Record Separator, a newline by default
ORS     Output Record Separator, a newline by default
FILENAME The name of the current input file

FLASHCARD
ubuntu notes
sudo mkfs -t ext4 /dev/sdb1

gawk

FS      Input Field Separator, a space by default
OFS     Output Field Separator, a space by default
NF      The Number of Fields in the current input record
NR      The total Number of input Records seen so far
RS      Record Separator, a newline by default
ORS     Output Record Separator, a newline by default
FILENAME The name of the current input file


FLASHCARD
bash header

#!/usr/bin/bash
SCR=$(echo "$0" | gawk '{n=split($0, a, "/"); print a[n];}')
Tmp=/tmp/$$
Tmp1="/tmp/"$SCR"_"$$
trap 'exit 0' INT HUP QUIT TERM ALRM USR1
trap 'rm -f "$Tmp" "$Tmp1"' EXIT
rm -f "$Tmp"  >/dev/null 2>&1
rm -f "$Tmp1" >/dev/null 2>&1

FLASHCARD
EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
#tar cvf /tmp/$EPOCHTIME--my.tar ./my
cp ./my /tmp/$EPOCHTIME--my.tar

FLASHCARD
# https://linuxize.com/post/how-to-compare-strings-in-bash/

for filename in *.mp3; do
done
if [ "$OPTNAME" = "" ]; then
fi
if [ $# -eq 0 ]; then
fi

while getopts "g" arg
do
    case $arg in
        a) ACCOUNT=$OPTARG
           ;;
	*) exit 0
           ;;
    esac
done
shift $(($OPTIND - 1))


FLASHCARD
bash header

#!/usr/bin/bash
SCR=$(echo "$0" | gawk '{n=split($0, a, "/"); print a[n];}')
Tmp=/tmp/$$
Tmp1="/tmp/"$SCR"_"$$
Tmp2="/tmp/"$SCR"_"$$"_"$$
Tmp3="/tmp/"$SCR"_"$$"_"$$"_"$$
Tmp4="/tmp/"$SCR"_"$$"_"$$"_"$$"_"$$
trap 'exit 0' INT HUP QUIT TERM ALRM USR1
trap 'rm -f "$Tmp" "$Tmp1" "$Tmp2" "$Tmp3" "$Tmp4"' EXIT
rm -f "$Tmp"  >/dev/null 2>&1
rm -f "$Tmp1" >/dev/null 2>&1
rm -f "$Tmp2" >/dev/null 2>&1
rm -f "$Tmp3" >/dev/null 2>&1
rm -f "$Tmp4" >/dev/null 2>&1

#!/usr/bin/bash
Tmp=/tmp/$$

if [ $# -eq 0 ]
  then


while getopts "g" arg
do
    case $arg in
        a) ACCOUNT=$OPTARG
           ;;
	*) exit 0
           ;;
    esac
done
shift $(($OPTIND - 1))


if [ $strval1 == "Ubuntu" ]; then
  echo "Linux operating system"
else
  echo "Windows operating system"
fi

FLASHCARD
Moving by Characters, Words and Tokens

h move the cursor left
j move the cursor down
k move the cursor up
l move the cursor right

5j the cursor moves down 5 lines.

b move to the start of a word
B move to the start of a token
w move to the start of the next word
W move to the start of the next token
e move to the end of a word
E move to the end of a token

FLASHCARD
Movement

;   - repeat previous f, t, F or T movement
,   - repeat previous f, t, F or T movement, backwards
}   - jump to next paragraph
{   - jump to previous paragraph

Moving by Lines

0 (zero)  jump to the beginning of the line
$  jump to the end of the line
^  jump to the first (non-blank) char of the line
#G / #gg / :#  move to a line number

FLASHCARD
Moving by Screens

Ctrl + b  move back one full screen
Ctrl + f  move forward one full screen
Ctrl + d  move forward 1/2 a screen
Ctrl + u  move back 1/2 a screen
Ctrl + e  move screen down one line (not cursor)
Ctrl + y  move screen up one line (not cursor)
Ctrl + o  move backward through the jump history
Ctrl + i  move forward through the jump history

H   move to the top of the screen (H=high)
M   move to the middle of the screen (M=middle)
L   move to the bottom of the screen (L=low)
zz - center cursor on screen

FLASHCARD
Search in File

*      jump to the next instance of the current word
#      jump to previous instance of the current word
/ptrn  search forward for the specified pattern
?ptrn  search backward for the specified pattern
n      repeat the search in the same direction
N      repeat the search in the opposite direction

Macros

qa   record macro a
q    stop recording macro
@a   run macro a
@@   run last macro again

FLASHCARD
Visual Mode

gv - last visual selection
v   select text using character mode
V   select lines using line mode
o   move from one end of the selected text to the other
aw  select a word
ab  select a block with ()
aB  select a block with {}
at  select a block with <>
ib  select inner block with ()
iB  select inner block with {}
it  select inner block with <>
Ctrl+v  select text using block mode

FLASHCARD
Editing Text

r         replace a single char (goto command mode)
cc        replace an entire line (goto insert mode)
C / c$    replace from the cursor to the end of a line
cw        replace from the cursor to the end of a word
s         delete a character (goto insert mode)
J         merge the line below with a space in between
gJ        merge the line below with no space in between t
u         undo
Ctrl + r  redo
.         repeat last command

FLASHCARD
Working with Multiple Files

:e fname   open a file in a new buffer
:bn        move to the next buffer
:bp        go back to previous buffer
:bd        close buffer
:b#        move to the specified buffer (by number)
:b fname   move to a buffer (by name)
:ls        list all open buffers
:sp fname  open a file in a new buffer with horz split
:vs fname  open a file in a new buffer with vert split
:vert ba   edit all files as vertical viewports
:tab ba    edit all buffers as tabs
gt         move to next tab
gT         move to previous tab

FLASHCARD
Marks and Jumps

m[a-z]  mark text using character mode (from a to z)
M[a-z]  mark lines using line mode (from a to z)
`a     - jump to position marked a
`y`a    yank text to position marked >a>
`.      jump to last change in file
`0      jump to position where Vim was last exited
``      jump to last jump
:marks  list all marks
:jumps  list all jumps
:changes  list all changes
Ctrl+i  move to next instance in jump list
Ctrl+o  move to previous instance in jump list
g,  move to next instance in change list
g;  move to previous instance in change list

FLASHCARD
Macros

q<k>  - enter and exit macro for key <k>
@<k>  - execute macro <k>
@@    - execute last executed macro

Text Objects

word:           w   sentence:       s    paragraph:    p
single quotes:  a'  double quotes:  a"   parentheses:  a)
brackets:       a]  braces:         a}   HTML tags:    at
angle brackets: a>

ci<o>  - change inner text object
ca<o>  - change around the text object (incl whitespace)

FLASHCARD
Reminders

i     - enter insert mode
I     - goto start of line and enter insert mode

FLASHCARD
GAWK String Functions Description

split(s, a [, r])i
Splits the string s into the array a on the regular expression r, and returns the number of fields.
If r is omitted, FS is used instead. The array a is cleared first. Splitting behaves identically to
field splitting.

asort(s [, d])
Returns the number of elements in the source array s. The contents of s are sorted using gawk's
normal rules for comparing values, and the indexes of the sorted values of s are replaced with
sequential integers starting with 1.

If the optional destination array d is specified, then s is first duplicated into d, and then d
is sorted, leaving the indexes of the source array s unchanged.

asorti(s [, d])
Returns the number of elements in the source array s. The behavior is the same as that of asort(),
except that the array indices are used for sorting, not the array values. When done, the array is
indexed numerically, and the values are those of the original indices.

The original values are lost; thus provide a second array if you wish to preserve the original.

gensub(r, s, h [, t])
Search the target string t for matches of the regular expression r. If h is a string beginning with g or
G, then replace all matches of r with s. Otherwise, h is a number indicating which match of r to
replace. If t is not supplied, $0 is used instead. Within the replacement text s, the sequence \n, where
n is a digit from 1 to 9, may be used to indicate just the text that matched the n'th parenthesized
subexpression. The sequence \0 represents the entire matched text, as does the character &. Unlike
sub() and gsub(), the modified string is returned as the result of the function, and the original target
string is not changed.

FLASHCARD
GAWK String Functions Description

gsub(r, s [, t])
For each substring matching the regular expression r in the string t, substitute the string s, and return
the number of substitutions. If t is not supplied, use $0. An & in the replacement text is replaced with
the text that was actually matched. Use \& to get a literal &. (This must be typed as "\\&")
index(s, t) Returns the index of the string t in the string s, or 0 if t is not present.
(This implies that character indices start at one.)

length([s])
Returns the length of the string s, or the length of $0 if s is not supplied.

match(s, r [, a])
Returns the position in s where the regular expression r occurs, or 0 if r is not present, and sets the
values of RSTART and RLENGTH. Note that the argument order is the same as for the ~ operator:
str ~ re. If array a is provided, a is cleared and then elements 1 through n are filled with the portions
of s that match the corresponding parenthesized subexpression in r. The 0'th element of a contains
the portion of s matched by the entire regular expression r. Subscripts a[n, "start"], and a[n, "length"]
provide the starting index in the string and length respectively, of each matching substring.


sprintf(fmt, expr-list)
Prints expr-list according to fmt, and returns the resulting string.

strtonum(str)
Examines str, and returns its numeric value. If str begins with a leading 0, strtonum() assumes that
str is an octal number. If str begins with a leading 0x or 0X, strtonum() assumes that str is a
hexadecimal number.

FLASHCARD
GAWK String Functions Description

sub(r, s [, t])
Just like gsub(), but only the first matching substring is replaced.

substr(s, i [, n]) 
Returns the at most n-character substring of s starting at i. If n is omitted, the rest of s is used.

tolower(str)
Returns a copy of the string str, with all the upper-case characters in str translated to their
corresponding lower-case counterparts. Non-alphabetic characters are left unchanged.

toupper(str)
Returns a copy of the string str, with all the lower-case characters in str translated to their
corresponding upper-case counterparts. Non-alphabetic characters are left unchanged. 

FLASHCARD
gawk regex

A regex sub-expression may be followed by an occurrence indicator (aka repetition operator):

?: The preceding item is optional and matched at most once (i.e., occurs 0 or 1 times or optional).
*: The preceding item will be matched zero or more times, i.e., 0+
+: The preceding item will be matched one or more times, i.e., 1+
{m}: The preceding item is matched exactly m times.
{m,}: The preceding item is matched m or more times, i.e., m+
{m,n}: The preceding item is matched at least m times, but not more than n times.
For example: The regex xy{2,4} accepts "xyy", "xyyy" and "xyyyy".

2.8  Occurrence Indicators (Repetition Operators): +, *, ?, {m}, {m,n}, {m,}
A regex sub-expression may be followed by an occurrence indicator (aka repetition operator):

?: The preceding item is optional and matched at most once (i.e., occurs 0 or 1 times or optional).
*: The preceding item will be matched zero or more times, i.e., 0+
+: The preceding item will be matched one or more times, i.e., 1+
{m}: The preceding item is matched exactly m times.
{m,}: The preceding item is matched m or more times, i.e., m+
{m,n}: The preceding item is matched at least m times, but not more than n times.
For example: The regex xy{2,4} accepts "xyy", "xyyy" and "xyyyy".

FLASHCARD
Very magic

    Use of \v means that after it, all ASCII characters except 0-9, a-z, A-Z and _ have special meaning

    The default syntax of Vim regexp has only a few metacharacters like ., *, ^ and so on.
    If you are familiar with regexp usage in programming languages such as Perl, Python and
    JavaScript, you can use \v to get a similar syntax in Vim. This will allow the use of
    more metacharacters such as (), {}, +, ? and so on without having to prefix them
    with a \ metacharacter. From :h magic documentation:

    \v<his> matches his or to-his but not this or history or _hist
    a<b.*\v<end> matches c=a<b #end but not c=a<b #bending
    note that \v is used after a<b to avoid having to escape <
    \vone|two|three matches one or two or three
    \vabc+ matches abc or abccc but not ab or bc
    s/\vabc?/X/ replaces abcc with Xc
    s/\vt.{-}a/X/g replaces that is quite a fabricated tale with XX fabricaXle
    \vab{3}c matches xabbbcz but not abbc or abbbbbc
    s/\v(\w+),(\w+)/\2,\1/g replaces good,bad 42,24 with bad,good 24,42
    compare this to default syntax: s/\(\w\+\),\(\w\+\)/\2,\1/g

Magic and nomagic

    \m           magic mode (this is the default setting)
    \M           nomagic mode
    ., * and ~ are no longer metacharacters (compared to magic mode)
    \., \* and \~ will make them to behave as metacharacters
    ^ and $ would still behave as metacharacters
    \Ma.b matches only a.b
    \Ma\.b matches a.b as well as a=b or a<b or acd etc
FLASHCARD


