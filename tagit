#!/usr/bin/bash
Tmp=/tmp/$$
Tmp1=/tmp/$$_$$
isnfs () {                                                                                                                       
    LOCAL=`stat -f -c %T "$1"`                                                                                                   
    if [ "$LOCAL" == "nfs" ]; then                                                                                               
         RETVAL="YES"                                                                                                             
    else                                                                                                                         
         RETVAL="NO"                                                                                                              
    fi                                                                                                                           
}

consolebar () {
    echo "********************************************************************************************************************************"
}
consolemsg () {
#   consolebar
    echo "** $1"
#   consolebar
    A=$A
}
optconsolemsg () {
#    echo "** $1"
    A=$A
}

RET=`isnfs "/etc/usbstick1"`
if [ "$RET" != "$YES" ]; then
    echo "/etc/usbstick1 not mounted"
    exit 0
fi

mkdir -p ~/taralamo
A="/tmp/tagit_$(date +"%Y_%m_%d_%I_%M_%p")"
cp /home/$USER/tagit "$A"
HERE="/etc/masterd/ALAMO"
# rsync -av "$A" "master.home:$HERE"

archivesyncfiles () {
        FN=`pwd`
        ART=`echo $FN | gawk -i ~/utils.awk '{print righthere($0)}'`
        HERE="$ARCHOME/$ART"
        echo "$HERE"
        optconsolemsg "RSYNC::  ARCHIVE Syncing Files - \"$HERE\""
        if [ "$PWD" != "$HERE" ]; then
            cd ..
            rsync -arv --delete "$ART" "master.home:$ARCHOME"
            cd "$ART"
        else
            consolemsg "RSYNC:: ARCHIVE Not Syncing: PWD is $HERE"
        fi
}
syncfiles () {
        HERE="$ARCHOME/$ART/$ALB"
        if [ "$PWD" != "$HERE" ]; then
            optconsolemsg "RSYNC (A1) with includes *.mp3,*.m3u,*.jpg:  Syncing Files - $HERE"
            mkdir -p "$HERE"
            printf "%-34s %-34s %-34s\n" "$ART" "$ALB" "$HERE"
            rsync -a --include "*.mp3"  --include="*.m3u" --include="*.jpg"  --exclude="*" --delete . "$HERE"
        else
            consolemsg "RSYNC:: Not Syncing: PWD is $HERE"
        fi

        firstCharacter=${ART:0:1}
        firstCharacter=`echo "$firstCharacter" | tr '[:upper:]' '[:lower:]'`
        # note the escape on the less than operator
        # https://www.tutorialkart.com/bash-shell-scripting/bash-compare-strings/
#       if [ "$firstCharacter" \< "n" ]; then
#           echo "LESS THAN"
#       else
#           echo "NOT LESS THAN"
#       fi
        if [ "$firstCharacter" \< "n" ]; then
            HERE="$SDHOME1/TAGGER/$ART/$ALB"
            if [ "$PWD" != "$HERE" ]; then
                optconsolemsg "RSYNC (T1) with includes *.mp3,*.m3u,*.jpg:  Syncing Files - $HERE"
                mkdir -p "$HERE"
                printf "%-34s %-34s %-34s\n" "$ART" "$ALB" "$HERE"
                rsync -a --include "*.mp3"  --include="*.m3u" --include="*.jpg"  --exclude="*" --delete . "$HERE"
            else
                consolemsg "Not Syncing: PWD is $HERE"
            fi
        else
            HERE="$SDHOME2/TAGGER/$ART/$ALB"
            if [ "$PWD" != "$HERE" ]; then
                optconsolemsg "RSYNC (T2) with includes *.mp3,*.m3u,*.jpg:  Syncing Files - $HERE"
                mkdir -p "$HERE"
                printf "%-34s %-34s %-34s\n" "$ART" "$ALB" "$HERE"
                rsync -a --include "*.mp3"  --include="*.m3u" --include="*.jpg"  --exclude="*" --delete . "$HERE"
            else
                consolemsg "Not Syncing: PWD is $HERE"
            fi
        fi


        HERE="$SRVHOME/$ART/$ALB"
        if [ "$PWD" != "$HERE" ]; then
            optconsolemsg "RSYNC (M) with includes *.mp3,*.m3u,*.jpg:  Syncing Files - $HERE"
            mkdir -p "$HERE"
            printf "%-34s %-34s %-34s\n" "$ART" "$ALB" "$HERE"
            rsync -a --include "*.mp3"  --include="*.m3u" --include="*.jpg"  --exclude="*" --delete . "$HERE"
        else
            consolemsg "Not Syncing: PWD is $HERE"
        fi

}
# ls *.jpeg | gawk -i /home/$USER/utils.awk '{sz=$0;sub(/[.]jpeg/,".jpg",sz);system ("mv " dq($0) " " dq(sz));}'
#   -h,  --help               Display this help and exit
#   -f,  --list-frames        Display all possible frames for id3v2
#   -L,  --list-genres        Lists all id3v1 genres
#   -v,  --version            Display version information and exit
#   -l,  --list               Lists the tag(s) on the file(s)
#   -R,  --list-rfc822        Lists using an rfc822-style format for output
#   -d,  --delete-v2          Deletes id3v2 tags
#   -s,  --delete-v1          Deletes id3v1 tags
#   -D,  --delete-all         Deletes both id3v1 and id3v2 tags
#   -C,  --convert            Converts id3v1 tag to id3v2
#   -1,  --id3v1-only         Writes only id3v1 tag
#   -2,  --id3v2-only         Writes only id3v2 tag
#   -r,  --remove-frame "FRAMEID"   Removes the specified id3v2 frame
#   -a,  --artist       "ARTIST"    Set the artist information
#   -A,  --album        "ALBUM"     Set the album title information
#   -t,  --song         "SONG"      Set the song title information
#   -c,  --comment      "DESCRIPTION":"COMMENT":"LANGUAGE"  
#                             Set the comment information (both
#                             description and language optional)
#   -g,  --genre   num        Set the genre number
#   -y,  --year    num        Set the year
#   -T,  --track   num/num    Set the track number/(optional) total tracks
#
PLAYLISTS=/etc/seab/playlists
PWD=`pwd`
LIST=""
WRITEIT="yes"
NORMALIZE=""
TAGFILE=""
SETYEAR=""
RENAMEFILE=""
KILLNUMS=""
SHUFFLE=""
LISTER=""
M3U=""
CONVERT=""
OPTNAME=""
PICTURE=""
SIMULATE=""
GDMODE=""
#SDHOME1="/media/$USER/9C33-6BBD"
SDHOME1="/etc/usbstick1"

#SDHOME2="/media/$USER/9C33-6BBD"
SDHOME2="/etc/usbstick2"

SRVHOME="/etc/music"
ARCHOME="/etc/masterd/TAGGER"
SYNCOPTION="NO SET"
GENRE="17"
FREETEXT=""

while getopts "juhv:y:123456abpn:irtslmz:xgc" arg
do
    case $arg in
        j) GENRE="8"
           ;;
        u) KILLNUMS="yes"
           ;;
        h) echo "tagit"
           echo "$PWD"
           echo "$SDHOME1"
           echo "$SDHOME2"
           echo "$SRVHOME"
           exit 0 
           ;;
        n) OPTNAME="$OPTARG"
           FREETEXT="$OPTNAME"
           ;;
        y) YRR=$OPTARG
           SETYEAR="yes"
           ;;
        v) ARG=$OPTARG
           # https://wiki.videolan.org/Console/
           # rc interface
           # The rc module is a interactive command line interface. run vlc --intf rc.
           # ncurses interface
           # The ncurses module is something like a text-mode GUI. run vlc --intf ncurses.
           nohup gnome-terminal -- vlc --intf ncurses "$ARG"
           exit 0
           ;;
        g) GDMODE="yes"
           ;;
        b) SIMULATE="yes"
           ;;
        1)
           ~/removefromfilename "^" "1"
           exit 0
           ;;
        2)
           ~/removefromfilename "^" "2"
           exit 0
           ;;
        3)
           ~/removefromfilename "^" "3"
           exit 0
           ;;
        4)
           ~/removefromfilename "^" "4"
           exit 0
           ;;
        5)
           ~/removefromfilename "^" "5"
           exit 0
           ;;
        6)
           ~/removefromfilename "^" "6"
           exit 0
           ;;
        a) 
           #find . -type f | egrep "txt$"
           F=`ls ~/GDJPG | egrep "jpg$" | shuf -n 1`
           cp ~/GDJPG/$F /tmp/art.jpg
           echo $F
           exit 0
           ;;
        p) PICTURE="yes"
           ;;
        s) SHUFFLE="yes"
           ;;
        r) RENAMEFILE="yes"
           ;;
        t) TAGFILE="yes"
           ;;
        l) LISTER="yes"
           ;;
        m) M3U="yes"
           ;;
        z) SYNC="yes"
           SYNCOPTION="$OPTARG"
           ;;
        c) CONVERT="yes" 
           for filename in *.m4a; do
               NAME=`echo "$filename" | sed "s/[.]mp4$//g"`
               ffmpeg -i "$filename" -ab 320k "${filename%.m4a}.mp3"
               #ffmpeg -i "$NAME.mp4" -f mp3 -ab 192000 -vn "$NAME.mp3"
           done
           exit 0
           ;;
        x)  
           if [ "$OPTNAME" = "" ]; then
               OPTNAME="FILES"
           fi
           if [ "$OPTNAME" != "" ]; then
               rm -rf "$OPTNAME"
               find . -type f | sed "s#^.#$(pwd)#" | egrep "mp3$" | sed 's/^/"/' | sed 's/$/"/' > $Tmp
               cat $Tmp
               rm -rf "$OPTNAME"
               mkdir -p "$OPTNAME"
               xargs -a $Tmp cp -t "$OPTNAME"
           fi
           find . -type f | egrep "txt$"
           find . -type f | egrep "txt$" | sed "s/[,]//g" | sed "s/Vol[.]/Vol/"
           exit 0
           ;;
    esac
done
shift $(($OPTIND - 1))


rm -rf ./taggerdo
TOTAL=0
for filename in *.mp3; do
    let TOTAL=TOTAL+1
done

# if [ "$WRITEIT" = "yes" ]; then
# for filename in *; do
# done
# ./taggerdo
# fi

if [ "$KILLNUMS" = "yes" ]; then
    CT=0
    if [ "$SIMULATE" = "yes" ]; then
        echo "***********************"
        echo "** SIMULATE MODE"
        echo "***********************"
    fi
    for filename in *.mp3; do
        let CT=CT+1
        FILE="$filename"
        NAME=`echo "$filename" | sed "s/^[0-9]*//g"`
        NAME=`echo "$NAME"     | sed "s/^[ ]*//g"`
        NAME=`echo "$NAME"     | sed "s/^[_]*//g"`
        NAME=`echo "$NAME"     | sed "s/^[ ]*//g"`

        rm -f  ./taggerdo
        TOFILE="$NAME"
        if [ "$FILE" != "$TOFILE" ]; then
	        # echo "Both Strings are not Equal."
            CMD="mv \"./$FILE\" \"./$NAME\""
            echo $CMD > ./taggerdo
            chmod 777  ./taggerdo
            if [ "$SIMULATE" != "yes" ]; then
                ./taggerdo
            else
                cat ./taggerdo
            fi
            rm -f  ./taggerdo
        else
	        # echo "Both Strings are Equal."
            rm -f  ./taggerdo
        fi
        rm -f  ./taggerdo
    done
fi

if [ "$RENAMEFILE" = "yes" ]; then
    CT=0
    if [ "$SIMULATE" = "yes" ]; then
        echo "***********************"
        echo "** SIMULATE MODE"
        echo "***********************"
    fi
    for filename in *.mp3; do
        let CT=CT+1
        FILE="$filename"
        NAME=`echo "$filename" | sed "s/^[0-9]*//g"`

        NAME=`echo "$NAME"     | sed "s/-[.]mp3$/.mp3/"`
        NAME=`echo "$NAME"     | sed "s/-[.]mp3$/.mp3/"`
        NAME=`echo "$NAME"     | sed "s/-[.]mp3$/.mp3/"`

        NAME=`echo "$NAME"     | sed "s/,/ /g"`

        NAME=`echo "$NAME"     | sed "s/-\]//g"`
        NAME=`echo "$NAME"     | sed "s/\]//g"`
        NAME=`echo "$NAME"     | sed "s/ [.]mp3$/.mp3/"`
        NAME=`echo "$NAME"     | sed "s/ [.]mp3$/.mp3/"`

        NAME=`echo "$NAME"     | sed "s/ -} / into /g"`
        NAME=`echo "$NAME"     | sed "s/ -}/ into /g"`
        NAME=`echo "$NAME"     | sed "s/-}/ into /g"`

        NAME=`echo "$NAME"     | sed "s/[&]/ and /g"`
        NAME=`echo "$NAME"     | sed "s/[.][.]/./g"`
        NAME=`echo "$NAME"     | sed "s/[']//g"`
        NAME=`echo "$NAME"     | sed "s/[\']//g"`
        NAME=`echo "$NAME"     | sed "s/^[ ]*//g"`
        NAME=`echo "$NAME"     | sed "s/[ ][ ]/ /g"`
        NAME=`echo "$NAME"     | sed "s/[ ][ ]/ /g"`
        NAME=`echo "$NAME"     | sed "s/[ ][ ]/ /g"`
        NAME=`echo "$NAME"     | sed "s/^[_]*//g"`
        NAME=`echo "$NAME"     | sed "s/^[-]//g"`
        NAME=`echo "$NAME"     | sed "s/^[.]//g"`
        rm -f  ./taggerdo
        if [ "$TOTAL" -gt 99 ]; then
            TRK=`printf "%03d" "$CT"`
        else
            TRK=`printf "%02d" "$CT"`
        fi
        TOFILE="$TRK $NAME"
        if [ "$FILE" != "$TOFILE" ]; then
	        # echo "Both Strings are not Equal."
            CMD="mv \"./$FILE\" \"./$TRK $NAME\""
            echo $CMD 
            echo $CMD > ./taggerdo
            chmod 777  ./taggerdo
            if [ "$SIMULATE" != "yes" ]; then
                ./taggerdo
            else
                cat ./taggerdo
            fi
            rm -f  ./taggerdo
        else
	        # echo "Both Strings are Equal."
            rm -f  ./taggerdo
        fi
        rm -f  ./taggerdo
    done
fi

if [ "$TAGFILE" = "yes" ]; then
    if [ "$GDMODE" = "yes" ]; then
        echo "***********************"
        echo "** GD MODE"
        echo "***********************"
    fi
    rm -f  ./taggerdo
    let CT=0
    for filename in *.mp3; do
        id3v2  -D          "$filename"
        let CT=CT+1
        FN=`pwd`/$filename
        echo $FN
        SNG=`echo $FN | gawk -i ~/utils.awk '{print song($0)}' | sed 's/[.]mp3$//' | sed 's/^[0-9]*[ ]*//g'`
        ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
        ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
        echo "Artist "$ART
        echo "Song   "$SNG
        echo "Album  "$ALB
         
        if [ "$TOTAL" -gt "99" ]; then
            TRK=`printf "%03d" "$CT"`
        else
            TRK=`printf "%02d" "$CT"`
        fi
        TRK=$TRK/$TOTAL
        id3v2  -1 -a "$ART"  "$filename"
        id3v2  -2 -a "$ART"  "$filename"
        id3v2  -1 -A "$ALB"  "$filename"
        id3v2  -2 -A "$ALB"  "$filename"
        id3v2  -1 -t "$SNG"  "$filename"
        id3v2  -2 -t "$SNG"  "$filename"
        id3v2  -1 -T "$TRK"  "$filename"
        id3v2  -2 -T "$TRK"  "$filename"
        id3v2  -1 -g $GENRE  "$filename"
        id3v2  -2 -g $GENRE  "$filename"
        if [ "$SETYEAR" = "yes" ]; then
           id3v2  -1 -y "$YRR"  "$filename"
           id3v2  -2 -y "$YRR"  "$filename"
           id3v2  -1 -l "$filename"
        fi

        if [ "$GDMODE" = "yes" ]; then
           F=`ls ~/GDJPG | egrep "jpg$" | shuf -n 1`
           rm -f ./art.jpg
           F=/home/$USER/GDJPG/$F
           echo "*"
           echo "**"
           echo "***"
           echo "***************************************************************************"
           echo "** GD MODE    $F"
           echo "***************************************************************************"
           echo "***"
           echo "**"
           echo "*"
           eyeD3 --add-image="$F":FRONT_COVER "$filename"
        else
            FILE=./art.jpg
            if [ -f "$FILE" ]; then
                # echo "$FILE exists."
                cp "$FILE" .
                eyeD3 --add-image="$FILE":FRONT_COVER "$filename"
            else
                FILE=/tmp/art.jpg
                if [ -f "$FILE" ]; then
                    # echo "$FILE exists."
                    cp "$FILE" .
                    eyeD3 --add-image="$FILE":FRONT_COVER "$filename"
                fi
           fi

        fi

    done

    M3U="yes"

    if [ "$SETYEAR" = "yes" ]; then
       SETYEAR=""
    fi

    FILE=/tmp/art.jpg
    if [ -f "$FILE" ]; then
        rm -f "$FILE"
    fi

fi

if [ "$SETYEAR" = "yes" ]; then
    echo "**************************************************************************"
    echo "** Setting Year to $YRR"
    echo "**************************************************************************"
    for filename in *.mp3; do
        id3v2  -1 -y "$YRR"  "$filename"
        id3v2  -2 -y "$YRR"  "$filename"
    done
#   for f in *.mp3; do
#       /usr/bin/id3v2 -2 -l "$f"
#   done
fi
if [ "$PICTURE" = "yes" ]; then
    for filename in *.mp3; do
        FILE=./art.jpg
        if [ -f "$FILE" ]; then
            # echo "$FILE exists."
            cp "$FILE" .
            eyeD3 --add-image="$FILE":FRONT_COVER "$filename"
        else
            FILE=/tmp/art.jpg
            if [ -f "$FILE" ]; then
                # echo "$FILE exists."
                cp "$FILE" .
                eyeD3 --add-image="$FILE":FRONT_COVER "$filename"
            fi
       fi
    done
fi
if [ "$SHUFFLE" = "yes" ]; then
    consolemsg "Shuffle"
    ART=""
    ALB=""
    RET=`ls  | egrep "[.]mp3$" | wc -l`
    for filename in *.mp3; do
        FN=`pwd`/$filename
        ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
        ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
    done
    if [ $RET = 0 ]; then
        ART=`pwd | gawk -F / '{print $NF}'`
        ALB="Libography"
        consolemsg "Librography playlist"
    fi
    consolemsg "$ART"
    consolemsg "$ALB"
    FILE="00 $ART-$ALB-Shuffle.m3u"
    #find . -type f | sed "s#^.#$(pwd)#" | egrep "mp3$" | sort      >> "$FILE"
    echo "#EXTM3U"                                                   > "$FILE"
    echo "#PLAYLIST:$ART-$ALB"                                      >> "$FILE"
    echo "#EXTART:$ART"                                             >> "$FILE"
    echo "#EXTALB:$ALB"                                             >> "$FILE"
    find . -type f | sed "s#^.#$(pwd)#" | egrep "mp3$" | shuf  > $Tmp
    CT=1
    while IFS= read -r line
    do
        let CT=CT+1
        TRK=`printf "%03d" "$CT"`
        SONG=`echo $line | gawk -i $HOME/utils.awk '{print songname($0)}'`
        SONG=`echo "$SONG" | sed "s/^[0-9]*//g"`
        RET=`mp3info -p "%S" "$line"`
        echo "#EXTINF $RET,$TRK$SONG"
        echo "$line"
    done < "$Tmp" >> "$FILE"
    cat "$FILE"
    cp "$FILE" "$PLAYLISTS"
    consolemsg "$FILE"
fi


if [ "$M3U" = "yes" ]; then
    consolemsg "Playlisting"
    rm -f *.m3u
    PLAYLISTS="../../All/Playlists"
    ART=""
    ALB=""
    RET=`ls  | egrep "[.]mp3$" | wc -l`
    for filename in *.mp3; do
        FN=`pwd`/$filename
        ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
        ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
    done
    if [ $RET = 0 ]; then
        ART=`pwd | gawk -F / '{print $NF}'`
        ALB="Libography"
        consolemsg "Librography playlist"
        PLAYLISTS="../All/Playlists"
    fi
    consolemsg "$ART"
    consolemsg "$ALB"
    rm -f "playlist.m3u"
    rm -f "00 $ALB.m3u"
    
    FILE="00 $ART-$ALB.m3u"
    FILE2="$ART-$ALB.m3u"
    consolemsg "--- Straight Playlist  $FILE"
    rm -f "$FILE"
    echo "#EXTM3U"                                                   > "$FILE"
    echo "#PLAYLIST:$ART-$ALB"                                      >> "$FILE"
    echo "#EXTART:$ART"                                             >> "$FILE"
    echo "#EXTALB:$ALB"                                             >> "$FILE"
    find . -type f | sed "s#^.#$(pwd)#" | egrep "mp3$" | sort > $Tmp
    while IFS= read -r line
    do
        SONG=`echo $line | gawk -i $HOME/utils.awk '{print songname($0)}'`
        RET=`mp3info -p "%S" "$line"`
        echo "#EXTINF $RET,$SONG"
        echo "$line"
    done < "$Tmp" >> "$FILE"
    cp "$FILE" "$PLAYLISTS/$FILE2"

    FILE="$ART-$ALB-Shuffle.m3u"
    consolemsg "--- Shuffle Playlist   $FILE"
    rm -f "$FILE"
    echo "#EXTM3U"                                                   > "$FILE"
    echo "#PLAYLIST:$ART-$ALB"                                      >> "$FILE"
    echo "#EXTART:$ART"                                             >> "$FILE"
    echo "#EXTALB:$ALB"                                             >> "$FILE"
    find . -type f | sed "s#^.#$(pwd)#" | egrep "mp3$" | shuf > $Tmp
    while IFS= read -r line
    do
        SONG=`echo $line | gawk -i $HOME/utils.awk '{print songname($0)}'`
        RET=`mp3info -p "%S" "$line"`
        echo "#EXTINF $RET,$SONG"
        echo "$line"
    done < "$Tmp" >> "$FILE"
    mv "$FILE" "$PLAYLISTS"
fi

if [ "$LISTER" = "yes" ]; then
    for f in *.mp3; do
        BAND=`/usr/bin/id3v2 -2 -l "$f" | gawk -i ~/utils.awk '/TPE1/ {n=split($0,A,":"); print trim(A[n]);}'`
        ALB=`/usr/bin/id3v2 -2 -l "$f"  | gawk -i ~/utils.awk '/TALB/ {n=split($0,A,":"); print trim(A[n]);}'`
        NAME=`/usr/bin/id3v2 -2 -l "$f" | gawk -i ~/utils.awk '/TIT2/ {n=split($0,A,":"); print trim(A[n]);}'`
        TRACK=`/usr/bin/id3v2 -2 -l "$f" | gawk -i ~/utils.awk '/TRCK/ {n=split($0,A,":"); print trim(A[n]);}'`
        printf "%s, %s, %s, %s, %s\n" "$TRACK" "$BAND" "$ALB" "$NAME" "$f"
    done
fi

if [ "$SYNC" = "yes" ]; then
    if [ "$SYNCOPTION" = "0" ]; then
        FN=`pwd`
        export ALB=`echo $FN | gawk -i ~/utils.awk '{print cdr1($0)}'`
        export ART=`echo $FN | gawk -i ~/utils.awk '{print cdr2($0)}'`
        if [ "$ALB" == "Playlists" ]; then
            if [ "$ART" == "All" ]; then
                syncfiles
            fi
        else
            ALB=""
            ART=""
            RET=`ls  | egrep "[.]mp3$" | wc -l`
            for filename in *.mp3; do
                export FN=`pwd`/$filename
                export ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
                export ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
            done
            if [ $RET = 0 ]; then
                ART=`pwd | gawk -F / '{print $NF}'`
                ALB="Libography"
                consolemsg "Librography playlist"
                consolemsg "$ART"
                consolemsg "$ALB"
            else
                consolemsg "$ART"
                consolemsg "$ALB"
                if [ "$ALB" != "" ]; then
                    if [ "$ART" != "" ]; then
                        syncfiles
                    fi
                fi
            fi
        fi
    fi

    if [ "$SYNCOPTION" = "1" ]; then
        archivesyncfiles
    fi
    if [ "$SYNCOPTION" = "5" ]; then
        # /dev/sdg1: UUID="dceea53b-2662-41f6-a2a2-6660d4914df7" TYPE="ext4"
        # /dev/sdh1: UUID="0a06b26d-3ac5-4592-9d93-1fb9324deaaf" TYPE="ext4"
        # The Cube
        D1UUID="0a06b26d-3ac5-4592-9d93-1fb9324deaaf"
        D2UUID="dceea53b-2662-41f6-a2a2-6660d4914df7"
        D3UUID="422a900f-1bcb-4899-b83e-2010dde0b7fd"
        D4UUID="90d5ef2a-8a61-411d-a145-c84f0e7960f9"
        D5UUID="994d87f7-1a9f-45ef-a4c7-8b527d4754c6"
        D6UUID="930c456a-98d0-41c6-96ee-cf0274eebd3c"
        sudo mkdir -p  /etc/usbstick1
        sudo chmod 777 /etc/usbstick1
        sudo mkdir -p  /etc/usbstick2
        sudo chmod 777 /etc/usbstick2
        sudo mkdir -p  /etc/usbstick3
        sudo chmod 777 /etc/usbstick3
        sudo mkdir -p  /etc/usbstick4
        sudo chmod 777 /etc/usbstick4
        sudo mkdir -p  /etc/cube1
        sudo chmod 777 /etc/cube1
        sudo mkdir -p  /etc/cube2
        sudo chmod 777 /etc/cube2
        sudo umount UUID=$D1UUID
        sudo umount UUID=$D2UUID
        sudo umount UUID=$D3UUID
        sudo umount UUID=$D4UUID
        sudo umount UUID=$D5UUID
        sudo umount UUID=$D6UUID
        sudo mount UUID=$D1UUID /etc/usbstick1
        sudo mount UUID=$D2UUID /etc/usbstick2
        sudo mount UUID=$D3UUID /etc/usbstick3
        sudo mount UUID=$D4UUID /etc/usbstick4
        sudo mount UUID=$D5UUID /etc/cube1
        sudo mount UUID=$D6UUID /etc/cube2
        # master
        sudo umount /etc/mastera
        sudo umount /etc/masterb
        sudo umount /etc/masterd
        sudo umount /etc/mastere
        sudo umount /etc/masterf
        sudo mount 192.168.1.34:/etc/mastera               /etc/mastera
        sudo mount 192.168.1.34:/etc/masterb               /etc/masterb
        sudo mount 192.168.1.34:/etc/masterd               /etc/masterd
        sudo mount 192.168.1.34:/etc/mastere               /etc/mastere
        sudo mount 192.168.1.34:/etc/masterf               /etc/masterf
    fi
    if [ "$SYNCOPTION" = "10" ]; then
        for d in */ ; do
            echo "$d"
            cd "$d"
            for filename in *.mp3; do
                FN=`pwd`/$filename
                ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
                ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
            done
            syncfiles
            cd ..
        done
        exit 0
    fi
    if [ "$SYNCOPTION" = "100" ]; then
        for a in */ ; do
            firstCharacter=${a:0:1}
            firstCharacter=`echo "$firstCharacter" | tr '[:upper:]' '[:lower:]'`
            #if [ "$firstCharacter" \> "s" ]; then
                cd   "$a"
                for d in */ ; do
                    cd "$d"
                    for filename in *.mp3; do
                        FN=`pwd`/$filename
                        ALB=`echo $FN | gawk -i ~/utils.awk '{print album($0)}'`
                        if [ "$ALB" = "" ]; then
                            echo "ALB == NULL"
                            exit 0
                        fi
                        ART=`echo $FN | gawk -i ~/utils.awk '{print artist($0)}'`
                        if [ "$ART" = "" ]; then
                            echo "ART == NULL"
                            exit 0
                        fi
                    done
                    syncfiles
                    cd ..
                done
                cd ..
            #else
            #    A=$A
            # fi
        done
        exit 0
    fi

fi
rm -f  ./tags
exit 0


# ****************************************************************************************************************************
# ****************************************************************************************************************************
# ****************************************************************************************************************************
# ****************************************************************************************************************************
# ****************************************************************************************************************************
# ****************************************************************************************************************************

rm -f  ./taggerdo
COUNTER=0
for filename in *; do
    FILE="$filename"
    if [ "$2" = "" ]; then
        NAME=`echo "$filename" | sed "s/$1//g"`
    else
        NAME=`echo "$filename" | sed "s/$1/$2/g"`
    fi
    NAME=`echo "$NAME"     | sed "s/^[&]//g"`
    NAME=`echo "$NAME"     | sed "s/[']//g"`
    NAME=`echo "$NAME" | sed "s/^ //"`
    NAME=`echo "$NAME" | sed "s/^ //"`
    NAME=`echo "$NAME" | sed "s/^ //"`
    NAMEMP3="$NAME"
        if [ "$FILE" != "$NAMEMP3" ]; then
            CMD="mv \"./$FILE\" \"$NAMEMP3\""
            echo $CMD
            echo $CMD > ./taggerdo
            chmod 777  ./taggerdo
            if [ "$WRITEIT" = "yes" ]; then
               ./taggerdo
            fi
        fi
done
