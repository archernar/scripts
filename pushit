#!/bin/bash                                                                                          
Tmp=/tmp/$$                                                                                              
trap 'exit 0' INT HUP QUIT TERM ALRM USR1                                                                
trap 'rm -f "$Tmp"' EXIT                                                                         
rm -f "$Tmp"  >/dev/null 2>&1     
opentable() {
    echo "<table border=0 valign='top'><tr valign='top'>"
}
closetable() {
    echo "</tr></table>"
    echo ""
}

# Generate the Markdown
puttable() {
    rm -f /tmp/allall
    figlet "$1" | gawk '{print "\"echo # " $0\"}' >> /tmp/allall 
    find ./$1 -type f | grep "$1" | sort  > sam
    #javac Sorter.java
    java Sorter > fred
    cat fred | gawk -v sec="$1" '
    BEGIN {
      BASE=0
      COLS=4
      ct =BASE
      dash = ":----------------------------"
      hhhh = ".............................."
      hhhh = "                              "
      print ""
      print "## " sec
      print ""
      print "| " hhhh " | " hhhh " | " hhhh " | " hhhh " |"
      print "| " dash " | " dash " | " dash " | " dash " |"
      u = "https://raw.githubusercontent.com/archernar/scripts/main"
    }
    {
        if (ct == BASE) printf "%s", "| "
        sz = $0
        sub(/[.]/,"",sz)
        n=split(sz, A, "/")
        sz = "[" A[n] "]"  "(" u sz ")"
        if ( $0 != "") {
            print "cat " $0 >> "/tmp/allall"
            close("/tmp/allall")
        }
        printf "%s", sz " | "
        ct++
        if ( ct > (COLS-1) ) {
            ct = BASE
            print ""
        }
    }
    END {
#     if ( ct == 2 ) 
#        printf "%s", "x |"
      print ""
      print ""
    }
    '
}
puttableall() {
    find . -type f | sort | gawk -v sec="$1" '
    BEGIN {
      BASE=0
      COLS=4
      ct =BASE
      dash = ":----------------------------"
      hhhh = ".............................."
      hhhh = "                              "
      print ""
      print "## " sec
      print ""
      print "| " hhhh " | " hhhh " | " hhhh " | " hhhh " |"
      print "| " dash " | " dash " | " dash " | " dash " |"
      u = "https://raw.githubusercontent.com/archernar/scripts/main"
    }
    {
        if (ct == BASE) printf "%s", "| "
        sz = $0
        sub(/[.]/,"",sz)
        n=split(sz, A, "/")
        sz = "- [" A[n] "]"  "(" u sz ")"
        printf "%s", sz " | "
        ct++
        if ( ct > (COLS-1) ) {
            ct = BASE
            print ""
        }
    }
    END {
#     if ( ct == 2 ) 
#        printf "%s", "x |"
      print ""
      print ""
    }
    '
}
put() {
    find . -type f | grep "$1" | sort | gawk -v sec="$1" '
    BEGIN {
       print "<td valign='top'>"
       print "NEWLINEHERE" 
       print "## " sec
       u = "https://raw.githubusercontent.com/archernar/scripts/main"
    }
    {
        sz = $0
        sub(/[.]/,"",sz)
        n=split(sz, A, "/")
        print "- [" A[n] "]"  "(" u sz ")"
    }
    END {
       print "</td>"
    }
    '
}
echo "" > README.md
echo "Home Repo:   https://github.com/archernar/scripts" >> README.md
echo "" >> README.md
puttable "remember" >> README.md
puttable "flashcards" >> README.md
puttable "oneliners" >> README.md
puttable "isa" >> README.md
puttable "dotfiles" >> README.md
puttable "sed" >> README.md
puttable "awk" >> README.md
puttable "bash" >> README.md
puttable "vimscript" >> README.md
puttable "java" >> README.md
puttable "examples" >> README.md
puttable "css" >> README.md
puttable "adlist" >> README.md
puttable "commandfu" >> README.md

# echo "" >> README.md
# opentable >> README.md
# put "flashcards" >> README.md
# put "oneliners" >> README.md
# put "awk" >> README.md
# put "bash" >> README.md
# closetable >> README.md
# 
# echo "" >> README.md
# put "flashcards" >> README.md
# put "oneliners" >> README.md
# put "awk" >> README.md
# put "bash" >> README.md
# put "vimscript" >> README.md
# put "java" >> README.md
# put "css" >> README.md
# put "adlist" >> README.md
# put "commandfu" >> README.md
# echo "" >> README.md
# 
# opentable >> README.md
# put "vimscript" >> README.md
# put "java" >> README.md
# put "css" >> README.md
# put "adlist" >> README.md
# closetable >> README.md

# echo "" >> README.md
# echo "" >> README.md
# opentable >> README.md
# put "commandfu" >> README.md
# closetable >> README.md
# 
# echo "" > $Tmp
# echo "<!DOCTYPE html>" >> $Tmp
# echo "<html lang='en'>" >> $Tmp
# echo "" >> $Tmp
# echo "<head>" >> $Tmp
# echo "<link rel='stylesheet' href='simple.css'>" >> $Tmp
# echo "<title>Links</title>" >> $Tmp
# echo "</head>" >> $Tmp
# echo "<body>" >> $Tmp
# cat  README.md  >> $Tmp
# echo "</body>" >> $Tmp
# echo "</html>" >> $Tmp
# cat $Tmp | sed 's/^[<].*$//'       > README.html; cp README.html $Tmp;
# cat $Tmp | sed '/^$/d'             > README.html; cp README.html $Tmp;
# cat $Tmp | sed 's/^NEWLINEHERE//'  > README.html; cp README.html $Tmp;
# markdown $Tmp | sed '/^$/d' > README.html

cat  README.md > $Tmp
rm -f README.html
pandoc --css=simple.css "$Tmp" -f markdown -t html -s -o README.html --metadata pagetitle="README"
cp README.html $Tmp
cat $Tmp | gawk '
/^.*<style/, /^.*<[/]style/ {
    next
}
{
    print $0
}
' > README.html


cp README.md $Tmp
cat $Tmp | sed 's/^NEWLINEHERE//' > README.md
#-------------------------------------------------------------------------------------
git add README.md
git add README.html
git add simple.css
git add pushit
git commit -m "Update"
git push -u origin main
REPO=scripts
#rm -rf $HOME/.vim/bundle/$REPO
#vim  -c ":PluginInstall! $REPO" -c ":qa!"
#-------------------------------------------------------------------------------------

